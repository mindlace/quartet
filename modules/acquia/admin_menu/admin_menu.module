<?php
// $Id: admin_menu.module,v 1.43.2.7 2008/09/09 14:39:01 sun Exp $

/**
 * @file
 * Renders a menu tree for administrative purposes as dropdown menu at the top
 * of the window.
 */

/**
 * Implementation of hook_help().
 */
function admin_menu_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/admin_menu':
      return t('The Administration Menu will appear at the top of the page for users who have been given the "access administration menu" permission.  Customize appearance of the dropdown menu here.');

    case 'admin/help#admin_menu':
      return t(<<<EOT
<p>Drupal Administration Menu renders all administrative menu items below 'administer'
in a clean, attractive and purely CSS-based menu at the top of your website.  It contains
not only regular menu items - local tasks are also included, giving you extremely fast
access to any administrative resource and function your Drupal installation provides.</p>
<p>The menu also can display the number of anonymous and authenticated users,
<a href="http://drupal.org/project/devel">Devel module</a> links, and items generated by
other modules.</p>
<p>The <a href="!settings">settings page</a> is where administrators can choose
whether or not to allow the module to shift the page contents down to accommodate
the menu.  Depending on the design/layout of your theme, this may cause problems with
the appearance of the page.  Changing the '%margin-setting' setting may fix this
issue.</p>
<p>Please bear in mind that the displayed menu items in Drupal Administration Menu depend on the actual permissions of a user.  For example, if a user does not have the permission "@permission-access" and "@permission-users", the whole "@user-management" menu item will not be displayed.</p>
EOT
, array('!settings' => url('admin/settings/admin_menu'), '%margin-setting' => t('Apply margin-top to page body'), '@permission-access' => 'administer access control', '@permission-users' => 'administer users', '@user-management' => t('User management')));
  }
}

/**
 * Implementation of hook_perm().
 */
function admin_menu_perm() {
  return array('access administration menu', 'display drupal links');
}

/**
 * Implementation of hook_theme().
 */
function admin_menu_theme() {
  return array(
    'admin_menu_item' => array(
      'arguments' => array('link' => '', 'has_children' => FALSE, 'menu' => '', 'in_active_trail' => FALSE, 'extra_class' => ''),
    ),
    'admin_menu_icon' => array(
      'arguments' => array(),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function admin_menu_menu() {
  $items = array();
  $items['admin/settings/admin_menu'] = array(
    'title' => 'Administration Menu',
    'description' => 'Adjust settings for the dropdown Administration Menu.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('admin_menu_theme_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'admin_menu.inc',
  );
  $items['admin_menu/toggle-modules'] = array(
    'page callback' => 'admin_menu_toggle_modules',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'admin_menu.inc',
  );
  return $items;
}

/**
 * Implementation of hook_init().
 *
 * We can't move this into admin_menu_footer(), because PHP-only based themes
 * like chameleon load and output scripts and stylesheets in front of
 * theme_closure(), so we ensure Admin menu's styles and scripts are loaded on
 * all pages via hook_init().
 */
function admin_menu_init() {
  if (user_access('access administration menu')) {
    $path = drupal_get_path('module', 'admin_menu');
    drupal_add_css($path .'/admin_menu.css', 'module', 'all', FALSE);
    // Performance: Defer execution.
    drupal_add_js($path .'/admin_menu.js', 'module', 'header', TRUE);

    drupal_add_js(array('admin_menu' => array('margin_top' => variable_get('admin_menu_margin_top', 1))), 'setting');
    if ($_GET['q'] == 'admin/build/modules') {
      drupal_add_js(array('admin_menu' => array('tweak_modules' => variable_get('admin_menu_tweak_modules', 0))), 'setting');
    }
  }
}

/**
 * Suppress display of administration menu.
 *
 * This function should be called from within another module's page callback
 * (preferably using module_invoke()) when the menu should not be displayed.
 * This is useful for modules that implement popup pages or other special
 * pages where the menu would be distracting or break the layout.
 *
 * @param $set
 *   Defaults to TRUE.  If called before hook_footer, the menu will not be
 *   displayed.  Calling with FALSE returns the suppression state.
 */
function admin_menu_suppress($set = TRUE) {
  static $suppress = FALSE;
  if (!empty($set)) {
    $suppress = TRUE;
  }
  return $suppress;
}

/**
 * Implementation of hook_footer().
 *
 * Admin menu was previously output via hook_block(), but suffered from
 * theme-specific stylesheets that may be applied to layout blocks. We now
 * output Admin menu in the footer to circumvent this.
 *
 * @todo Since admin_menu is rebuilt in the same request, we should be able
 *   to use a helper function instead of a variable to remind us to rebuild
 *   (variable_set() is slow).
 */
function admin_menu_footer($main = 0) {
  // Check for the flag indicating that we need to rebuild.
  if (variable_get('admin_menu_rebuild_links', FALSE)) {
    module_load_include('inc', 'admin_menu');
    _admin_menu_rebuild_links();
    variable_del('admin_menu_rebuild_links');
  }

  if (!user_access('access administration menu') || admin_menu_suppress(FALSE)) {
    return;
  }

  $content  = '<div id="admin-menu">';
  $content .= admin_menu_tree_output(menu_tree_all_data('admin_menu'));
  $content .= '</div>';
  return $content;
}

/**
 * Returns a rendered menu tree.
 *
 * @param $tree
 *   A data structure representing the tree as returned from menu_tree_data.
 *
 * @return string
 *   The complete, rendered administration menu.
 */
function admin_menu_tree_output($tree) {
  $output = '';

  foreach ($tree as $data) {
    $extra_class = isset($data['link']['localized_options']['extra class']) ? $data['link']['localized_options']['extra class'] : NULL;
    // Omit alias lookups.
    $data['link']['localized_options']['alias'] = TRUE;

    $link = theme('menu_item_link', $data['link']);
    if ($data['below']) {
      $output .= theme('admin_menu_item', $link, $data['link']['has_children'], admin_menu_tree_output($data['below']), $data['link']['in_active_trail'], $extra_class);
    }
    else {
      $output .= theme('admin_menu_item', $link, $data['link']['has_children'], '', $data['link']['in_active_trail'], $extra_class);
    }
  }
  return $output ? "\n<ul>". $output .'</ul>' : '';
}

/**
 * Generate the HTML output for a single menu item and submenu.
 *
 * @param string $link
 *   A rendered menu item link.
 * @param bool $has_children
 *   Whether this item has children.
 * @param string $menu
 *   A string containing any rendered children of this item.
 * @param bool $in_active_trail
 *   Whether this item is in the active menu trail.
 * @param string $extra_class
 *   An additional CSS class to set for this item.
 *
 * @see theme_menu_item()
 * @ingroup themeable
 */
function theme_admin_menu_item($link, $has_children, $menu = '', $in_active_trail = FALSE, $extra_class = NULL) {
  $class = ($menu || $has_children ? 'expandable' : '');
  if (!empty($extra_class)) {
    $class .= ' '. $extra_class;
  }
  if ($in_active_trail) {
    $class .= ' active-trail';
  }
  return '<li'. (!empty($class) ? ' class="'. $class .'"' : '') .'>'. $link . $menu .'</li>';
}


/**
 * Implementation of hook_form_[form_id]_alter().
 *
 * Extends Devel module with Administration Menu developer settings.
 */
function admin_menu_form_devel_admin_settings_alter(&$form, $form_state) {
  module_load_include('inc', 'admin_menu');
  _admin_menu_devel_settings_form_alter($form, $form_state);
}

/**
 * Implementation of hook_enable().
 */
function admin_menu_enable() {
  variable_set('admin_menu_rebuild_links', TRUE);
}

/**
 * Implementation of hook_menu_alter().
 */
function admin_menu_menu_alter() {
  variable_set('admin_menu_rebuild_links', TRUE);
}

/**
 * Implementation of hook_translated_menu_link_alter().
 *
 * Here is where we make changes to links that need dynamic information such
 * as the current page path or the number of users.
 */
function admin_menu_translated_menu_link_alter(&$item, $map) {
  static $access_all;

  if (!isset($access_all)) {
    // We only ever do this for development
    $access_all = variable_get('admin_menu_show_all', 0) && module_exists('devel');
  }
  if ($item['menu_name'] != 'admin_menu') {
    return;
  }
  if ($access_all && !$item['access']) {
    $item['access'] = TRUE;
    // Prepare for http://drupal.org/node/266596
    if (!isset($item['localized_options'])) {
      _menu_item_localize($item, $map, TRUE);
    }
  }
  // Don't waste cycles altering items that are not visible
  if (!$item['access']) {
    return;
  }
  // Fix destination query strings
  if (isset($item['localized_options']['query'])) {
    if ($item['localized_options']['query'] == 'destination') {
      $item['localized_options']['query'] = drupal_get_destination();
    }
  }
  if (($item['link_path'] == 'http://drupal.org') && !user_access('display drupal links')) {
    $item['access'] = FALSE;
  }
  if ($extra = variable_get('admin_menu_display', 0)) {
    $item['title'] .= ' '. $extra[0] .': '. $item[$extra];
  }
  // Handle items that need dynamic localization/replacement.
  if (isset($item['options']['t'])) {
    $item['title'] = t($item['title'], $item['options']['t'] + array('@username' => $GLOBALS['user']->name));
  }
  if ($item['title'] == 'icon_users') {
    // Add count of active anonymous/authenticated users.
    // @see user_block(), user.module
    $interval = time() - variable_get('user_block_seconds_online', 900);
    $count_anon = sess_count($interval);
    $count_auth = db_result(db_query("SELECT COUNT(DISTINCT uid) FROM {sessions} WHERE uid > 0 AND timestamp >= %d", $interval));
    $icon_users = '<img src="'. base_path() . drupal_get_path('module', 'admin_menu') .'/images/icon_users.png" width="16" height="15" alt="@title" title="@title" />';

    $title = array('@title' => t('Current anonymous / authenticated users'));
    $icon_users = strtr($icon_users, $title);
    $item['title'] = t('@count-anon / @count-auth !icon', array('@count-anon' => $count_anon, '@count-auth' => $count_auth, '!icon' => $icon_users));
    if (user_access('administer users')) {
      $item['href'] = 'admin/user/user';
    }
  }
}

/**
 * Render an icon to display in the Administration Menu.
 *
 * @ingroup themeable
 */
function theme_admin_menu_icon() {
  return '<img class="admin-menu-icon" src="'. (theme_get_setting('toggle_favicon') ? theme_get_setting('favicon') : base_path() .'misc/favicon.ico') .'" width="16" height="16" alt="" />';
}

